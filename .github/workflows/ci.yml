name: CI

on:
  push:
    branches: ["main"]
  pull_request:

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  tests:
    name: Run backend tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      - name: Run pytest
        run: pytest

  frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install --no-frozen-lockfile

      - name: Build frontend
        working-directory: frontend
        run: pnpm build

  docker-image:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs:
      - tests
      - frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (and push) Docker image
        env:
          IMAGE_NAME: ghcr.io/${{ github.repository }}
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            docker buildx build \
              --file docker/Dockerfile \
              --platform linux/amd64 \
              --tag "$IMAGE_NAME:${{ github.sha }}" \
              --load \
              .
          else
            docker buildx build \
              --file docker/Dockerfile \
              --platform linux/amd64 \
              --tag "$IMAGE_NAME:${{ github.sha }}" \
              --tag "$IMAGE_NAME:latest" \
              --push \
              .
          fi
